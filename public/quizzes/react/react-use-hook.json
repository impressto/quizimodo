{
  "title": "React use Hook (React 19+)",
  "description": "A 15-question quiz to test your knowledge of the new React `use` hook.",
  "time": "10 minutes",
  "questions": [
    {
      "id": 1,
      "question": "What is the main purpose of the React `use` hook?",
      "options": [
        "To simplify working with async functions",
        "To provide a unified way to handle resources like promises and context",
        "To replace all existing React hooks",
        "To automatically style components"
      ],
      "answer": 1,
      "explanation": "The `use` hook provides a unified way to work with resources like promises, async data, and contexts directly inside React components."
    },
    {
      "id": 2,
      "question": "Which React version introduced the `use` hook?",
      "options": [
        "16.8",
        "17.5",
        "18.0",
        "19 (canary and upcoming stable)"
      ],
      "answer": 3,
      "explanation": "The `use` hook is a new addition in React 19 (currently available in canary builds)."
    },
    {
      "id": 3,
      "question": "What does `use(promise)` do when passed a promise?",
      "options": [
        "Returns a loading spinner",
        "Suspends rendering until the promise resolves or rejects",
        "Immediately rejects the component",
        "Logs the promise to the console"
      ],
      "answer": 1,
      "explanation": "When passed a promise, `use(promise)` suspends rendering until the promise resolves, and then returns the resolved value. If it rejects, the nearest error boundary handles the error."
    },
    {
      "id": 4,
      "question": "How does `use` integrate with React Suspense?",
      "options": [
        "It disables Suspense completely",
        "It allows throwing promises to suspend rendering until they resolve",
        "It replaces the Suspense component",
        "It converts Suspense into an error boundary"
      ],
      "answer": 1,
      "explanation": "`use` works closely with Suspense by suspending the component’s rendering when a promise is pending, letting React show a fallback until it resolves."
    },
    {
      "id": 5,
      "question": "What happens if `use` is called with a rejected promise?",
      "options": [
        "The app crashes",
        "React silently ignores it",
        "The nearest error boundary handles the rejection",
        "It retries the promise automatically"
      ],
      "answer": 2,
      "explanation": "If the promise rejects, React surfaces the error to the nearest error boundary, allowing developers to handle the error gracefully."
    },
    {
      "id": 6,
      "question": "Which of the following is a valid usage of `use`?",
      "options": [
        "`const data = use(fetchData());`",
        "`const result = use(someContext);`",
        "`const val = use(Promise.resolve(5));`",
        "All answers are valid"
      ],
      "answer": 3,
      "explanation": "`use` can be used with promises, contexts, and even custom resource wrappers. All the listed options are valid."
    },
    {
      "id": 7,
      "question": "What is required for `use(promise)` to work properly?",
      "options": [
        "It must be inside a Suspense boundary",
        "It must be inside a class component",
        "It must only be used in the root component",
        "It requires Redux"
      ],
      "answer": 0,
      "explanation": "`use(promise)` works only when the component is wrapped in a Suspense boundary to handle the loading state."
    },
    {
      "id": 8,
      "question": "Can `use` be called conditionally inside a component?",
      "options": [
        "Yes, always",
        "No, it follows the same rules as other hooks",
        "Only if using promises",
        "Only if using contexts"
      ],
      "answer": 1,
      "explanation": "`use` must follow the Rules of Hooks, meaning it cannot be called conditionally or inside loops."
    },
    {
      "id": 9,
      "question": "What does `use(context)` return?",
      "options": [
        "A promise",
        "The current value of the context",
        "The provider component",
        "An error boundary"
      ],
      "answer": 1,
      "explanation": "When passed a context object, `use(context)` returns the current value of that context."
    },
    {
      "id": 10,
      "question": "How does `use` simplify async data fetching compared to `useEffect`?",
      "options": [
        "It removes the need for state variables to store results",
        "It directly suspends until the data is ready",
        "It eliminates cleanup functions",
        "All answers are valid"
      ],
      "answer": 3,
      "explanation": "`use` allows developers to directly consume promises without manually managing state, effects, or cleanup logic."
    },
    {
      "id": 11,
      "question": "Which hook does `use(context)` effectively replace?",
      "options": [
        "useMemo",
        "useState",
        "useContext",
        "useReducer"
      ],
      "answer": 2,
      "explanation": "`use(context)` provides the same behavior as `useContext`, but with a more unified syntax."
    },
    {
      "id": 12,
      "question": "What will happen if you call `use` outside of a React component?",
      "options": [
        "It works normally",
        "React throws an error",
        "It runs only once",
        "It executes in strict mode only"
      ],
      "answer": 1,
      "explanation": "Like all React hooks, `use` must only be called inside React function components or custom hooks."
    },
    {
      "id": 13,
      "question": "Does `use` support streaming data sources?",
      "options": [
        "Yes, React plans to support resources beyond promises",
        "No, only static values",
        "Only if combined with Redux",
        "Only with useEffect"
      ],
      "answer": 0,
      "explanation": "React’s future plans include extending `use` to work with more types of asynchronous and streaming data sources."
    },
    {
      "id": 14,
      "question": "Which statement about `use` is correct?",
      "options": [
        "`use` is only for async/await syntax",
        "`use` can unify handling of promises and contexts",
        "`use` is just an alias for useState",
        "`use` is deprecated"
      ],
      "answer": 1,
      "explanation": "`use` is designed to unify handling of promises, async data, and contexts under a single API."
    },
    {
      "id": 15,
      "question": "Why is the `use` hook considered experimental?",
      "options": [
        "It has performance issues",
        "It is only available in React Canary builds",
        "It replaces too many hooks at once",
        "It requires TypeScript"
      ],
      "answer": 1,
      "explanation": "The `use` hook is currently experimental and available only in React Canary builds until React 19 becomes stable."
    }
  ]
}
