{
  "title": "useContext",
  "description": "A 10-question quiz to test your knowledge of the React useContext hook.",
  "time": "10 minutes",
  "questions": [
    {
      "id": 1,
      "topic": "useContext",
      "question": "What is the primary purpose of the `useContext` hook in React?",
      "options": [
        "To share data globally across components without prop drilling",
        "To manage local state within a single component",
        "To optimize component re-renders",
        "To replace Redux for state management"
      ],
      "answer": 0,
      "explanation": "`useContext` is used to share data globally across components without the need for prop drilling. It allows you to create a context that can be accessed by any component in the component tree, regardless of how deeply nested it is. This is particularly useful for sharing data that many components need, such as theme settings, user authentication status, or language preferences. While it can be used for state management, it's not a complete replacement for more complex state management solutions like Redux."
    },
    {
      "id": 2,
      "topic": "useContext",
      "question": "How do you create a context in React?",
      "options": [
        "Using `React.createContext()`",
        "Using `React.useContext()`",
        "Using `React.createStore()`",
        "Using `React.useState()`"
      ],
      "answer": 0,
      "explanation": "You create a context using the `React.createContext()` method. This function initializes a new context object that can be used to share values between components. The function can take an optional default value as an argument, which will be used if a component consumes the context without being wrapped in a Provider."
    },
    {
      "id": 3,
      "topic": "useContext",
      "question": "How do you access the value of a context within a functional component?",
      "options": [
        "Using the `useContext` hook",
        "Using the `useState` hook",
        "Using the `useReducer` hook",
        "Using the `useEffect` hook"
      ],
      "answer": 0,
      "explanation": "You access the value of a context within a functional component using the `useContext` hook. This hook takes the context object (created by `React.createContext()`) as an argument and returns the current context value. For example: `const theme = useContext(ThemeContext)`. This allows you to directly access the context value without needing to render a Context.Consumer component."
    },
    {
      "id": 4,
      "topic": "useContext",
      "question": "What is the first step to using `useContext`?",
      "options": [
        "Create a context using `React.createContext()`",
        "Import the context into your component",
        "Wrap your component tree with a context provider",
        "Define a default value for the context"
      ],
      "answer": 0,
      "explanation": "The first step to using `useContext` is to create a context using `React.createContext()`. This creates the context object that will hold the shared data. After creating the context, you typically wrap your component tree (or part of it) with the context's Provider component to make the context value available to all child components."
    },
    {
      "id": 5,
      "topic": "useContext",
      "question": "How do you provide a context value to child components?",
      "options": [
        "By wrapping the child components with the context's Provider component",
        "By passing the context value as a prop to each child component",
        "By using the `useState` hook to manage the context value",
        "By importing the context value directly in each child component"
      ],
      "answer": 0,
      "explanation": "You provide a context value to child components by wrapping them with the context's Provider component. The Provider component accepts a `value` prop, which is the value you want to make available to all child components. For example: `<ThemeContext.Provider value={darkTheme}>`. Any component within this Provider can then access the context value using the `useContext` hook."
    },
    {
      "id": 6,
      "topic": "useContext",
      "question": "What happens if you don't provide a value to the context Provider?",
      "options": [
        "The context will use its default value",
        "The context will be undefined",
        "The child components will throw an error",
        "The context will automatically use the nearest parent context value"
      ],
      "answer": 0,
      "explanation": "If you don't provide a value to the context Provider, the context will use its default value. This default value is specified when you create the context using `React.createContext(defaultValue)`. This ensures that components consuming the context will always receive a value, even if they're not wrapped in a Provider."
    },
    {
      "id": 7,
      "topic": "useContext",
      "question": "Can you use multiple contexts in a single component?",
      "options": [
        "Yes, by calling `useContext` for each context",
        "No, a component can only use one context at a time",
        "Yes, but only if the contexts are nested",
        "No, contexts cannot be used together in the same component"
      ],
      "answer": 0,
      "explanation": "Yes, you can use multiple contexts in a single component by calling `useContext` for each context. React allows you to consume as many contexts as you need in a single component. For example, you might have one context for theme settings and another for user authentication, and a component can access both using separate calls to `useContext`."
    },
    {
      "id": 8,
      "topic": "useContext",
      "question": "What is the default value in `React.createContext()` used for?",
      "options": [
        "It is used when a component does not have a matching Provider above it in the tree",
        "It is used to initialize the state of the context",
        "It is used to override the Provider value",
        "It is used to define the shape of the context value"
      ],
      "answer": 0,
      "explanation": "The default value in `React.createContext()` is used when a component consumes the context but does not have a matching Provider above it in the component tree. This ensures that the component will always receive a value, even if it's not wrapped in a Provider. However, once a component is wrapped in a Provider, the Provider's value will override the default value."
    },
    {
      "id": 9,
      "topic": "useContext",
      "question": "How do you update a context value?",
      "options": [
        "By using state within the context Provider and passing the state setter function to consumers",
        "By directly mutating the context value",
        "By re-rendering the entire component tree",
        "By using the `useReducer` hook inside the context"
      ],
      "answer": 0,
      "explanation": "You update a context value by using state within the context Provider and passing the state setter function to consumers. Typically, you would use the `useState` hook to manage the context value in the component that renders the Provider. Then, you pass both the current value and the setter function as the Provider's value. Consumers of the context can then use the setter function to update the context value, which will trigger a re-render of all components that consume that context."
    },
    {
      "id": 10,
      "topic": "useContext",
      "question": "What is a common use case for `useContext`?",
      "options": [
        "Theme management",
        "Local component state management",
        "Handling form submissions",
        "Fetching data from an API"
      ],
      "answer": 0,
      "explanation": "A common use case for `useContext` is theme management, where you need to share a theme (like dark mode or light mode) across many components in your application. By storing the theme in a context, you can easily switch between themes and have all components automatically update to reflect the current theme. Other common use cases include sharing user authentication status, language preferences, or any other data that needs to be accessed by many components."
    },
    {
      "id": 11,
      "topic": "useContext",
      "question": "Can `useContext` cause unnecessary re-renders?",
      "options": [
        "Yes, when the context value changes, all components consuming the context will re-render",
        "No, `useContext` never causes re-renders",
        "Only if the context value is an object or array",
        "Only if the context is used within a `useEffect` hook"
      ],
      "answer": 0,
      "explanation": "Yes, when the context value changes, all components consuming that context will re-render. This is because React needs to ensure that all components are using the latest context value. This can lead to performance issues if the context value changes frequently or if many components consume the context. To mitigate this, you can optimize performance by memoizing the context value or splitting your context into multiple contexts for unrelated data."
    },
    {
      "id": 12,
      "topic": "useContext",
      "question": "How can you optimize performance when using `useContext`?",
      "options": [
        "By memoizing the context value",
        "By avoiding the use of objects or arrays in the context value",
        "By using multiple contexts for unrelated data",
        "All answers"
      ],
      "answer": 3,
      "explanation": "You can optimize performance when using `useContext` by Memoizing the context value using `useMemo` to prevent unnecessary changes, avoiding the use of objects or arrays in the context value, as creating new objects or arrays will trigger re-renders even if the actual data hasn't changed, and using multiple contexts for unrelated data, so that changes to one context don't cause components that depend on another context to re-render. These techniques help minimize the number of re-renders and improve the overall performance of your application."
    },
    {
      "id": 13,
      "topic": "useContext",
      "question": "What is the relationship between `useContext` and `useReducer`?",
      "options": [
        "`useContext` can be used to share the state and dispatch function from `useReducer` across components",
        "`useReducer` replaces the need for `useContext`",
        "`useContext` and `useReducer` cannot be used together",
        "`useReducer` is used to create context"
      ],
      "answer": 0,
      "explanation": "`useContext` can be used to share the state and dispatch function from `useReducer` across components. This is a powerful pattern for global state management. You can create a context to hold the state and dispatch function returned by `useReducer`, and then any component in your application can access and update the state using `useContext`. This combines the state management capabilities of `useReducer` with the global accessibility of `useContext`."
    },
    {
      "id": 14,
      "topic": "useContext",
      "question": "How do you define a default value for a context?",
      "options": [
        "By passing the default value as an argument to `React.createContext()`",
        "By setting a default prop on the context Provider",
        "By using the `useState` hook inside the context",
        "By defining a static property on the context object"
      ],
      "answer": 0,
      "explanation": "You define a default value for a context by passing it as an argument to `React.createContext()`. For example: `const MyContext = React.createContext(defaultValue)`. This default value will be used by any component that consumes the context but is not wrapped in a Provider. It's a good practice to provide a meaningful default value that can be used as a fallback."
    },
    {
      "id": 15,
      "topic": "useContext",
      "question": "Can `useContext` be used with class components?",
      "options": [
        "No, but class components can use context with `Context.Consumer`",
        "Yes, by calling `this.useContext()`",
        "Yes, but only with additional configuration",
        "No, `useContext` is only for functional components"
      ],
      "answer": 0,
      "explanation": "`useContext` cannot be used directly in class components, as it is a hook and hooks can only be used in functional components. However, class components can still use context by rendering a `Context.Consumer` component. The `Context.Consumer` uses a render prop pattern to provide the context value to the class component. For example: `<MyContext.Consumer>{value => /* render something based on the context value */}</MyContext.Consumer>`."
    }
  ]
}
