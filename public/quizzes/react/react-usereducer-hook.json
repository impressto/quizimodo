{
  "title": "useReducer",
  "description": "A 20-question quiz to test your knowledge of the React useReducer hook.",
  "time": "15 minutes",
  "questions": [
    {
      "id": 1,
      "topic": "useReducer",
      "question": "What is the primary purpose of the `useReducer` hook in React?",
      "options": [
        "To manage complex state logic in a more predictable way",
        "To replace the Context API for global state management",
        "To optimize component rendering performance",
        "To handle side effects in functional components"
      ],
      "answer": 0,
      "explanation": "`useReducer` is used to manage complex state logic in a more predictable way, especially when you have complex state transitions or when the next state depends on the previous one."
    },
    {
      "id": 2,
      "topic": "useReducer",
      "question": "What does the `useReducer` hook return?",
      "options": [
        "An array with the current state and a dispatch function",
        "An object with state and setter functions",
        "A function to update the state directly",
        "A promise that resolves with the new state"
      ],
      "answer": 0,
      "explanation": "`useReducer` returns an array with the current state and a dispatch function to update the state."
    },
    {
      "id": 3,
      "topic": "useReducer",
      "question": "What are the parameters that `useReducer` takes?",
      "options": [
        "A reducer function, an initial state, and optionally an init function",
        "A state object and a setter function",
        "A context object and a provider component",
        "A component and its props"
      ],
      "answer": 0,
      "explanation": "`useReducer` takes a reducer function, an initial state, and optionally an init function as parameters."
    },
    {
      "id": 4,
      "topic": "useReducer",
      "question": "What is a reducer function in the context of `useReducer`?",
      "options": [
        "A function that takes the current state and an action, and returns the new state",
        "A function that reduces the number of state variables in your component",
        "A function that optimizes state updates",
        "A function that handles side effects"
      ],
      "answer": 0,
      "explanation": "A reducer function takes the current state and an action, and returns the new state based on that action."
    },
    {
      "id": 5,
      "topic": "useReducer",
      "question": "How do you update state using `useReducer`?",
      "options": [
        "By calling the dispatch function with an action",
        "By directly modifying the state object",
        "By calling the reducer function directly",
        "By using the `setState` method"
      ],
      "answer": 0,
      "explanation": "You update state using `useReducer` by calling the dispatch function with an action."
    },
    {
      "id": 6,
      "topic": "useReducer",
      "question": "What is an action in `useReducer`?",
      "options": [
        "An object that describes what happened, typically with a `type` property",
        "A function that updates the state",
        "A string that represents the new state",
        "A component that triggers state changes"
      ],
      "answer": 0,
      "explanation": "An action in `useReducer` is typically an object with a `type` property that describes what happened."
    },
    {
      "id": 7,
      "topic": "useReducer",
      "question": "When would you choose `useReducer` over `useState`?",
      "options": [
        "When you have complex state logic that involves multiple sub-values or when the next state depends on the previous one",
        "When you need to manage simple state in your component",
        "When you need to share state between components",
        "When you need to optimize rendering performance"
      ],
      "answer": 0,
      "explanation": "`useReducer` is preferable over `useState` when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one."
    },
    {
      "id": 8,
      "topic": "useReducer",
      "question": "How can you initialize state lazily with `useReducer`?",
      "options": [
        "By passing an init function as the third argument",
        "By using the `useState` hook inside the reducer",
        "By calling the reducer function directly with the initial state",
        "By using a class component instead of a functional component"
      ],
      "answer": 0,
      "explanation": "You can initialize state lazily with `useReducer` by passing an init function as the third argument."
    },
    {
      "id": 9,
      "topic": "useReducer",
      "question": "What is the correct way to define a reducer function?",
      "options": [
        "function reducer(state, action) { return newState; }",
        "function reducer(action) { return newState; }",
        "function reducer(state) { return action; }",
        "function reducer(newState, oldState) { return action; }"
      ],
      "answer": 0,
      "explanation": "A reducer function takes the current state and an action as parameters and returns the new state."
    },
    {
      "id": 10,
      "topic": "useReducer",
      "question": "Can you use `useReducer` with TypeScript?",
      "options": [
        "Yes, by defining types for the state and action",
        "No, `useReducer` is not compatible with TypeScript",
        "Yes, but only with additional configuration",
        "No, you must use JavaScript with `useReducer`"
      ],
      "answer": 0,
      "explanation": "Yes, you can use `useReducer` with TypeScript by defining types for the state and action."
    },
    {
      "id": 11,
      "topic": "useReducer",
      "question": "How can you combine multiple reducers in a single component?",
      "options": [
        "By using the `useReducer` hook multiple times, each with its own reducer and initial state",
        "By creating a single reducer that handles all state updates",
        "By nesting reducers inside each other",
        "By using the Context API to manage multiple reducers"
      ],
      "answer": 0,
      "explanation": "You can combine multiple reducers in a single component by using the `useReducer` hook multiple times, each with its own reducer and initial state."
    },
    {
      "id": 12,
      "topic": "useReducer",
      "question": "What is a common use case for `useReducer`?",
      "options": [
        "Managing state for complex forms",
        "Fetching data from an API",
        "Handling simple boolean toggles",
        "Optimizing component rendering"
      ],
      "answer": 0,
      "explanation": "A common use case for `useReducer` is managing state for complex forms with multiple fields and validation logic."
    },
    {
      "id": 13,
      "topic": "useReducer",
      "question": "How can you debug state updates with `useReducer`?",
      "options": [
        "By adding console logs in the reducer function",
        "By using the React DevTools",
        "By using Redux DevTools with a custom middleware",
        "All answers"
      ],
      "answer": 3,
      "explanation": "You can debug state updates with `useReducer` by adding console logs in the reducer function, using React DevTools, or using Redux DevTools with a custom middleware."
    },
    {
      "id": 14,
      "topic": "useReducer",
      "question": "Can you use `useReducer` with `useContext` for global state management?",
      "options": [
        "Yes, by creating a context for the state and dispatch function",
        "No, `useReducer` cannot be used with `useContext`",
        "Yes, but only if you use Redux",
        "No, you must use the Context API alone for global state management"
      ],
      "answer": 0,
      "explanation": "Yes, you can use `useReducer` with `useContext` for global state management by creating a context for the state and dispatch function."
    },
    {
      "id": 15,
      "topic": "useReducer",
      "question": "What happens if you dispatch an action with an unknown type in the reducer?",
      "options": [
        "The reducer should return the current state unchanged",
        "The reducer will throw an error",
        "The reducer will reset the state to its initial value",
        "The reducer will ignore the action and do nothing"
      ],
      "answer": 0,
      "explanation": "If an action with an unknown type is dispatched, the reducer should return the current state unchanged."
    },
    {
      "id": 16,
      "topic": "useReducer",
      "question": "How can you optimize performance when using `useReducer`?",
      "options": [
        "By memoizing the dispatch function with `useCallback`",
        "By splitting your reducer into smaller reducers",
        "By using the Redux library instead",
        "Both A and B"
      ],
      "answer": 3,
      "explanation": "You can optimize performance when using `useReducer` by memoizing the dispatch function with `useCallback` and by splitting your reducer into smaller reducers."
    },
    {
      "id": 17,
      "topic": "useReducer",
      "question": "What is the difference between `useReducer` and Redux?",
      "options": [
        "`useReducer` is built into React, while Redux is a separate library",
        "`useReducer` can only manage local state, while Redux can manage global state",
        "Redux has middleware and DevTools support, while `useReducer` does not",
        "All answers"
      ],
      "answer": 3,
      "explanation": "`useReducer` is built into React and typically used for local state management, while Redux is a separate library with middleware and DevTools support for global state management."
    },
    {
      "id": 18,
      "topic": "useReducer",
      "question": "Can you use `useReducer` in class components?",
      "options": [
        "No, `useReducer` is only for functional components",
        "Yes, by calling `this.useReducer()`",
        "Yes, but only with additional configuration",
        "No, class components must use `this.state` and `this.setState`"
      ],
      "answer": 0,
      "explanation": "`useReducer` is a hook and can only be used in functional components, not class components."
    },
    {
      "id": 19,
      "topic": "useReducer",
      "question": "How can you test a reducer function?",
      "options": [
        "By writing unit tests that call the reducer with different actions and assert the expected state",
        "By rendering the component and checking the DOM",
        "By using React Testing Library to simulate user interactions",
        "By manually testing the component in the browser"
      ],
      "answer": 0,
      "explanation": "You can test a reducer function by writing unit tests that call the reducer with different actions and assert the expected state."
    },
    {
      "id": 20,
      "topic": "useReducer",
      "question": "What is the purpose of the initial state in `useReducer`?",
      "options": [
        "To set the starting value of the state",
        "To define the shape of the state object",
        "To provide default values for actions",
        "To optimize the reducer function"
      ],
      "answer": 0,
      "explanation": "The initial state in `useReducer` sets the starting value of the state."
    }
  ]
}
