{
  "title": "React Code Examples Quiz",
  "questions": [
    {
      "question": "What will be the output of this React component?<br/><div class='quiz-code'><pre>function Counter() {\n  const [count, setCount] = useState(0);\n  \n  useEffect(() => {\n    setCount(count + 1);\n  }, []);\n  \n  return <div>{count}</div>;\n}</pre></div>",
      "options": [
        "It will display <code>0</code>",
        "It will display <code>1</code>",
        "It will cause an infinite rendering loop",
        "It will cause a compilation error"
      ],
      "answer": 1,
      "explanation": "The component will display <code>1</code>. The <code>useEffect</code> with an empty dependency array runs once after the initial render, updating the state from 0 to 1. Since the dependency array is empty, the effect doesn't run again on subsequent renders."
    },
    {
      "question": "What's wrong with this code snippet?<br/><div class='quiz-code'><pre>function UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  \n  useEffect(() => {\n    fetchUser(userId).then(data => setUser(data));\n  });\n  \n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.email}</p>\n    </div>\n  );\n}</pre></div>",
      "options": [
        "The <code>fetchUser</code> function is not imported",
        "Missing dependency array in <code>useEffect</code> will cause infinite fetches",
        "Potential error if <code>user</code> is null (no null check before accessing properties)",
        "All of the above"
      ],
      "answer": 3,
      "explanation": "This code has multiple issues:<br/><ul><li>The <code>fetchUser</code> function is not imported or defined in the shown code</li><li>The <code>useEffect</code> has no dependency array, so it will run after every render, causing infinite fetches</li><li>There's no null check before accessing <code>user.name</code> and <code>user.email</code>, which will cause an error when <code>user</code> is <code>null</code> (during initial render)</li></ul>"
    },
    {
      "question": "How would you fix the bug in this custom hook?<br/><div class='quiz-code'><pre>function useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}</pre></div>",
      "options": [
        "Add a try-catch block around the entire hook",
        "Add a check if <code>window</code> exists for server-side rendering",
        "Add the <code>key</code> as a dependency to a <code>useEffect</code> to update localStorage when it changes",
        "Use <code>useCallback</code> to memoize the <code>setValue</code> function"
      ],
      "answer": 2,
      "explanation": "The bug in this custom hook is that if the <code>key</code> prop changes, the hook won't update the localStorage with the new key.<br/><br/>The fix would be to add a <code>useEffect</code> that responds to changes in the <code>key</code>:<br/><div class='quiz-code'><pre>useEffect(() => {\n  // Update localStorage when key changes\n  window.localStorage.setItem(key, JSON.stringify(storedValue));\n}, [key, storedValue]);</pre></div>"
    }
  ]
}
